[
	{
		"name": "Youtube",
		"actions": [
			{
				"name": "OnYtUpload",
				"description": "Event triggered on video upload",
				"params": [
					{
						"name": "channel",
						"type": "string",
						"description": "Name of the channel to watch over"
					}
				],
				"returns": [
					{
						"name": "ID",
						"description": "Youtube ID of the uploaded video"
					},
					{
						"name": "CHANNEL_ID",
						"description": "Youtube ID of the channel the video was uploaded to"
					},
					{
						"name": "TITLE",
						"description": "Title of the uploaded video"
					},
					{
						"name": "DESCRIPTION",
						"description": "Description of the uploaded video"
					},
					{
						"name": "PUBLISHED_AT",
						"description": "Date of the release"
					},
					{
						"name": "CHANNEL_TITLE",
						"description": "Name of the channel the video was uploaded to"
					}
				]
			},
			{
				"name": "OnYtLike",
				"description": "Event triggered on video like",
				"params": [],
				"returns": []
			},
			{
				"name": "OnYtPlaylistAdd",
				"description": "Event triggered when a video is added to a playlist",
				"params": [
					{
						"name": "playlistId",
						"type": "string",
						"description": "ID of the playlist to watch over"
					}
				],
				"returns": [
					{
						"name": "ID",
						"description": "Youtube ID of the added video"
					},
					{
						"name": "CHANNEL_ID",
						"description": "Youtube ID of the channel the video was added to"
					},
					{
						"name": "TITLE",
						"description": "Title of the added video"
					},
					{
						"name": "DESCRIPTION",
						"description": "Description of the added video"
					},
					{
						"name": "CHANNEL_TITLE",
						"description": "Name of the channel the video belongs to"
					}
				]
			}
		],
		"reactions": [
			{
				"name": "YtLike",
				"description": "Like a Youtube video",
				"params": [
					{
						"name": "videoId",
						"type": "string",
						"description": "ID of the video to like"
					}
				],
				"returns": [
					{
						"name": "ID",
						"description": "Youtube ID of the liked video"
					}
				]
			},
			{
				"name": "YtComment",
				"description": "Comment a Youtube video",
				"params": [
					{
						"name": "videoId",
						"type": "string",
						"description": "ID of the video to comment"
					},
					{
						"name": "body",
						"type": "string",
						"description": "Content of the comment"
					}
				],
				"returns": [
					{
						"name": "ID",
						"description": "Youtube ID of the commented video"
					}
				]
			},
			{
				"name": "YtAddToPlaylist",
				"description": "Add a Youtube video to a playlist",
				"params": [
					{
						"name": "videoId",
						"type": "string",
						"description": "ID of the video to add"
					},
					{
						"name": "playlistId",
						"type": "string",
						"description": "ID of the playlist to add the video to"
					}
				],
				"returns": [
					{
						"name": "VIDEO_ID",
						"description": "Youtube ID of the added video"
					},
					{
						"name": "PLAYLIST_ID",
						"description": "Youtube ID of the playlist"
					}
				]
			}
		]
	},
	{
		"name": "Spotify",
		"actions": [
			{
				"name": "OnSpotifyAddToPlaylist",
				"description": "Event triggered when a song is added to a Spotify playlist",
				"params": [
					{
						"name": "playlistId",
						"type": "string",
						"description": "The Spotify ID of the playlist to watch"
					}
				],
				"returns": [
					{
						"name": "ID",
						"description": "ID of the added track"
					},
					{
						"name": "NAME",
						"description": "Name of the added track"
					}
				]
			},
			{
				"name": "OnSpotifySaveToLibrary",
				"description": "Event triggered when a song is added to a Spotify library",
				"params": [],
				"returns": [
					{
						"name": "ID",
						"description": "ID of the added track"
					},
					{
						"name": "NAME",
						"description": "Name of the added track"
					}
				]
			}
		],
		"reactions": [
			{
				"name": "PlayTrack",
				"description": "Play a track",
				"params": [
					{
						"name": "artist",
						"type": "string",
						"description": "Artist of the song to play"
					},
					{
						"name": "track",
						"type": "string",
						"description": "Title of the song to play"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "URL of the song"
					},
					{
						"name": "ARTIST",
						"description": "Artist of the song"
					},
					{
						"name": "TRACK",
						"description": "Title of the song"
					}
				]
			},
			{
				"name": "Pause",
				"description": "Pause play",
				"params": [],
				"returns": []
			},
			{
				"name": "AddTrackToLibrary",
				"description": "Add a track to library",
				"params": [
					{
						"name": "artist",
						"type": "string",
						"description": "Artist of the song to add"
					},
					{
						"name": "track",
						"type": "string",
						"description": "Title of the song to add"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "URL of the added song"
					},
					{
						"name": "ARTIST",
						"description": "Artist of the added song"
					},
					{
						"name": "TRACK",
						"description": "Title of the added song"
					}
				]
			},
			{
				"name": "AddToPlaylist",
				"description": "Add a track to a playlist",
				"params": [
					{
						"name": "artist",
						"type": "string",
						"description": "Artist of the song to add"
					},
					{
						"name": "track",
						"type": "string",
						"description": "Title of the song to add"
					},
					{
						"name": "playlist",
						"type": "string",
						"description": "Name of the playlist"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "URL of the added song"
					},
					{
						"name": "ARTIST",
						"description": "Artist of the added song"
					},
					{
						"name": "TRACK",
						"description": "Title of the added song"
					}
				]
			}
		]
	},
	{
		"name": "Github",
		"actions": [
			{
				"name": "OnOpenPR",
				"description": "An event triggered when a pull request is opened on the repository given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "PR_NAME",
						"description": "The opened pull request name"
					},
					{
						"name": "PR_BODY",
						"description": "The opened pull request body"
					},
					{
						"name": "PR_OPENER",
						"description": "The user's username that opened the pull request"
					},
					{
						"name": "PR_HEAD",
						"description": "The name of the branch to merge into the base branch"
					},
					{
						"name": "PR_BASE",
						"description": "The name of the branch to merge head branch into"
					},
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					}
				]
			},
			{
				"name": "OnCommentPR",
				"description": "An event triggered by a new comment inside the pull request on the repository given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "PR_NAME",
						"description": "The opened pull request name"
					},
					{
						"name": "PR_BODY",
						"description": "The opened pull request body"
					},
					{
						"name": "PR_OPENER",
						"description": "The user's username that opened the pull request"
					},
					{
						"name": "PR_HEAD",
						"description": "The name of the branch to merge into the base branch"
					},
					{
						"name": "PR_BASE",
						"description": "The name of the branch to merge head branch into"
					},
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "COMMENTER",
						"description": "The user's username that comment the pull request"
					},
					{
						"name": "COMMENT_BODY",
						"description": "The body of the new comment on the pull request"
					}
				]
			},
			{
				"name": "OnClosePR",
				"description": "An event triggered when a pull request is closed on the repository given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "PR_NAME",
						"description": "The opened pull request name"
					},
					{
						"name": "PR_BODY",
						"description": "The opened pull request body"
					},
					{
						"name": "PR_OPENER",
						"description": "The user's username that opened the pull request"
					},
					{
						"name": "PR_HEAD",
						"description": "The name of the branch to merge into the base branch"
					},
					{
						"name": "PR_BASE",
						"description": "The name of the branch to merge head branch into"
					},
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					}
				]
			},
			{
				"name": "OnMergePR",
				"description": "An event triggered when a pull request is merged on the repository given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "PR_NAME",
						"description": "The opened pull request name"
					},
					{
						"name": "PR_BODY",
						"description": "The opened pull request body"
					},
					{
						"name": "PR_OPENER",
						"description": "The user's username that opened the pull request"
					},
					{
						"name": "PR_HEAD",
						"description": "The name of the branch merged into the base branch"
					},
					{
						"name": "PR_BASE",
						"description": "The name of the branch to merge head branch into"
					},
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					}
				]
			},
			{
				"name": "OnCreateIssue",
				"description": "An event triggered when an issue is created on the repository given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "ISSUE_NAME",
						"description": "The title of the created issue"
					},
					{
						"name": "ISSUE_CONTENT",
						"description": "The description of the created issue"
					},
					{
						"name": "ISSUE_AUTHOR",
						"description": "The issue creator username"
					}
				]
			},
			{
				"name": "OnCommentIssue",
				"description": "An event triggered when an user comments an issue on the repository given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "ISSUE_NAME",
						"description": "The title of the created issue"
					},
					{
						"name": "ISSUE_CONTENT",
						"description": "The description of the created issue"
					},
					{
						"name": "ISSUE_AUTHOR",
						"description": "The issue creator username"
					},
					{
						"name": "COMMENT",
						"description": "The body of the new comment on an issue of the repository given as parameter"
					},
					{
						"name": "COMMENTER",
						"description": "The author of the comment on an issue"
					}
				]
			},
			{
				"name": "OnCloseIssue",
				"description": "An event triggered when an issue is closed in the repository given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "ISSUE_NAME",
						"description": "The title of the created issue"
					},
					{
						"name": "ISSUE_CONTENT",
						"description": "The description of the created issue"
					},
					{
						"name": "ISSUE_AUTHOR",
						"description": "The issue creator username"
					}
				]
			},
			{
				"name": "OnForkRepo",
				"description": "An event triggered when the repository given as parameter is forked",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "FORKER",
						"description": "The username of the user that fork the repository"
					}
				]
			},
			{
				"name": "OnStarRepo",
				"description": "An event triggered when a user star the repository given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "REPO_NAME",
						"description": "The name of the repository"
					},
					{
						"name": "REPO_OWNER",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "STAR_COUNT",
						"description": "The number of stars on the repository"
					},
					{
						"name": "STARER",
						"description": "The username of the user that starred the repository"
					}
				]
			},
			{
				"name": "OnWatchRepo",
				"description": "An event triggered when an user watch a repository",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The user's username that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The targeted repository's name"
					}
				],
				"returns": [
					{
						"name": "REPO_NAME",
						"description": "The name of the repository watched by the user"
					},
					{
						"name": "REPO_OWNER",
						"description": "The username of the user that owns the repository"
					},
					{
						"name": "WATCH_COUNT",
						"description": "The number of users watching the repository"
					},
					{
						"name": "WATCHER",
						"description": "The username of the user that watched the repository"
					}
				]
			}
		],
		"reactions": [
			{
				"name": "OpenPR",
				"description": "Open a pull request on a given repository",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the user that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					},
					{
						"name": "title",
						"type": "string",
						"description": "The title of the opened pull request"
					},
					{
						"name": "head",
						"type": "string",
						"description": "The name of the branch to merge into base branch"
					},
					{
						"name": "base",
						"type": "string",
						"description": "The name of the branch to merge intro head branch"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url of the newly opened pull request"
					}
				]
			},
			{
				"name": "CommentPR",
				"description": "Comments the numbered pull request of the given repository",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the repository owner"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					},
					{
						"name": "pull_number",
						"type": "integer",
						"description": "The number assigned to the commented pull request"
					},
					{
						"name": "body",
						"type": "string",
						"description": "The body of the comment written under the pull request"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url to the comment"
					}
				]
			},
			{
				"name": "ClosePR",
				"description": "Closes the pull request given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the user that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					},
					{
						"name": "pull_number",
						"type": "integer",
						"description": "The number assigned to the pull request to close"
					}
				],
				"returns": []
			},
			{
				"name": "MergePR",
				"description": "Merges the pull request given as parameter into base branch",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the user that owns the repository"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					},
					{
						"name": "pull_number",
						"type": "integer",
						"description": "The number assigned to the pull request to merge"
					}
				],
				"returns": []
			},
			{
				"name": "CreateIssue",
				"description": "Creates an issue into the given repository",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the repository owner"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					},
					{
						"name": "title",
						"type": "string",
						"description": "The title of the issue to create"
					},
					{
						"name": "body",
						"type": "string",
						"description": "The body of the issue to create"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url of the newly created issue"
					}
				]
			},
			{
				"name": "CommentIssue",
				"description": "Comments the given issue into the given repository",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the repository owner"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					},
					{
						"name": "issue_number",
						"type": "integer",
						"description": "The number assigned to the issue to comment"
					},
					{
						"name": "body",
						"type": "string",
						"description": "The body of the comment"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url of the newly created comment"
					}
				]
			},
			{
				"name": "CloseIssue",
				"description": "Closes the given issue into the given repository",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the repository owner"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					},
					{
						"name": "issue_number",
						"type": "integer",
						"description": "The number assigned to the issue to close"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url of the closed issue"
					}
				]
			},
			{
				"name": "CreateRepo",
				"description": "Creates a new repository with the given name",
				"params": [
					{
						"name": "name",
						"type": "string",
						"description": "The name of the repository to create"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url of the newly created repository"
					}
				]
			},
			{
				"name": "CreatePrivateRepo",
				"description": "Creates a new private repository with the given name",
				"params": [
					{
						"name": "name",
						"type": "string",
						"description": "The name of the private repository to create"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url of the newly created private repository"
					}
				]
			},
			{
				"name": "UpdateDescription",
				"description": "Updates the description of the given repository",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the repository owner"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					},
					{
						"name": "description",
						"type": "string",
						"description": "The description to set to the given repository"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url of the repository"
					}
				]
			},
			{
				"name": "ForkRepo",
				"description": "Forks the repository of the user given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the repository owner"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					}
				],
				"returns": [
					{
						"name": "URL",
						"description": "The url of the forked repository"
					}
				]
			},
			{
				"name": "StarRepo",
				"description": "Stars the repository of the user given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the repository owner"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					}
				],
				"returns": []
			},
			{
				"name": "WatchRepo",
				"description": "Watches the repository of the user given as parameter",
				"params": [
					{
						"name": "owner",
						"type": "string",
						"description": "The username of the repository owner"
					},
					{
						"name": "repo",
						"type": "string",
						"description": "The name of the repository"
					}
				],
				"returns": []
			}
		]
	},
	{
		"name": "Discord",
		"actions": [
			{
				"name": "OnDiscordMessage",
				"description": "An event triggered by the reception of a direct message",
				"params": [],
				"returns": [
					{
						"name": "MESSAGE",
						"description": "The body of the received message"
					},
					{
						"name": "AUTHOR_ID",
						"description": "The Discord ID of the message's author"
					},
					{
						"name": "AUTHOR_NAME",
						"description": "The Discord username of the message's author"
					}
				]
			},
			{
				"name": "OnDiscordMessageFrom",
				"description": "An event triggered by the reception of a direct message from a specified user",
				"params": [
					{
						"name": "user_id",
						"type": "string",
						"description": "The Discord ID of the sender"
					}
				],
				"returns": [
					{
						"name": "MESSAGE",
						"description": "The body of the received message"
					},
					{
						"name": "AUTHOR_ID",
						"description": "The Discord ID of the message's author"
					},
					{
						"name": "AUTHOR_NAME",
						"description": "The Discord username of the message's author"
					}
				]
			},
			{
				"name": "OnDiscordMention",
				"description": "An event triggered when the authenticated user is mentioned",
				"params": [],
				"returns": [
					{
						"name": "MESSAGE",
						"description": "The body of the received message"
					},
					{
						"name": "AUTHOR_ID",
						"description": "The Discord ID of the message's author"
					},
					{
						"name": "AUTHOR_NAME",
						"description": "The Discord username of the message's author"
					}
				]
			},
			{
				"name": "OnNewDiscordGuildMember",
				"description": "An event triggered when a new member joins a guild",
				"params": [],
				"returns": [
					{
						"name": "NEW_MEMBER_ID",
						"description": "The Discord ID of the new member"
					},
					{
						"name": "NEW_MEMBER_NAME",
						"description": "The Discord Username of the new member"
					},
					{
						"name": "SERVER_ID",
						"description": "The Discord ID of the guild"
					},
					{
						"name": "SERVER_NAME",
						"description": "The name of the guild"
					}
				]
			},
			{
				"name": "OnDiscordGuildLeave",
				"description": "An event triggered when a member leaves a guild",
				"params": [],
				"returns": [
					{
						"name": "NEW_MEMBER_ID",
						"description": "The Discord ID of the new member"
					},
					{
						"name": "NEW_MEMBER_NAME",
						"description": "The Discord Username of the new member"
					},
					{
						"name": "SERVER_ID",
						"description": "The Discord ID of the guild"
					},
					{
						"name": "SERVER_NAME",
						"description": "The name of the guild"
					}
				]
			}
		],
		"reactions": [
			{
				"name": "PostDiscordMessage",
				"description": "Posts a message on a given server (in a given channel)",
				"params": [
					{
						"name": "server_id",
						"type": "string",
						"description": "The Discord ID of the server"
					},
					{
						"name": "channel_id",
						"type": "string",
						"description": "The Discord ID of the channel"
					},
					{
						"name": "content",
						"type": "string",
						"description": "The body of the message to post"
					}
				],
				"returns": [
					{
						"name": "USER_ID",
						"description": "The Discord ID of the sender"
					},
					{
						"name": "USERNAME",
						"description": "The Discord username of the sender"
					},
					{
						"name": "MESSAGE_CONTENT",
						"description": "The body of the posted message"
					},
					{
						"name": "CHANNEL_ID",
						"description": "The Discord ID of the channel"
					},
					{
						"name": "CHANNEL_NAME",
						"description": "The Discord name of the channel"
					},
					{
						"name": "SERVER_ID",
						"description": "The Discord ID of the server"
					},
					{
						"name": "SERVER_NAME",
						"description": "The Discord name of the server"
					}
				]
			},
			{
				"name": "PostDiscordDM",
				"description": "Sends a message to a given user",
				"params": [
					{
						"name": "other_id",
						"type": "string",
						"description": "The Discord ID of the recipient"
					},
					{
						"name": "content",
						"type": "string",
						"description": "The body of the message to send"
					}
				],
				"returns": [
					{
						"name": "USER_ID",
						"description": "The Discord ID of the sender"
					},
					{
						"name": "USERNAME",
						"description": "The Discord username of the sender"
					},
					{
						"name": "MESSAGE_CONTENT",
						"description": "The body of the posted message"
					},
					{
						"name": "SENDEE_ID",
						"description": "The Discord ID of the recipient"
					},
					{
						"name": "SENDEE_USERNAME",
						"description": "The Discord name of the recipient"
					}
				]
			},
			{
				"name": "LeaveDiscordServer",
				"description": "Leave given Discord server",
				"params": [
					{
						"name": "server_id",
						"type": "string",
						"description": "The Discord ID of the server"
					}
				],
				"returns": [
					{
						"name": "USER_ID",
						"description": "The Discord ID of the leaver"
					},
					{
						"name": "USERNAME",
						"description": "The Discord username of the leaver"
					},
					{
						"name": "SERVER_ID",
						"description": "The Discord ID of the server"
					},
					{
						"name": "SERVER_NAME",
						"description": "The Discord name of the server"
					}
				]
			},
			{
				"name": "SetDiscordStatus",
				"description": "Leave given Discord server",
				"params": [
					{
						"name": "status",
						"type": "string",
						"description": "The status to set"
					}
				],
				"returns": [
					{
						"name": "USER_ID",
						"description": "The Discord ID of the user"
					},
					{
						"name": "USERNAME",
						"description": "The Discord username of the user"
					},
					{
						"name": "STATUS",
						"description": "The Discord status of the user"
					}
				]
			}
		]
	}
]
